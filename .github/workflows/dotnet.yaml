name: Unit Test With Coverage
on:
  push:
    branches:
      - master
    paths:
      - "**/dotnet/**"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Restore dependencies
      run: |
        cd dotnet/Temperatura.Testes
        dotnet restore 
    - name: Build
      run: |
        cd dotnet/Temperatura.Testes
        dotnet build --no-restore
    - name: Test
      run: |
        cd dotnet/Temperatura.Testes
        dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal Temperatura.Testes.csproj
    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: dotnet/Temperatura.Testes/TestResults/coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: 6fba94027676331adec08030de830676
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       
    - name: Print code coverage
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"
    - name: Print badge data
      run: echo "Badge data ${{steps.test_step.outputs.badge}}"     
    - name: Find Information about Test Cases
      run: |
        cat > ./file.ps1 << ENDOFFILE
        foreach($line in Get-Content dotnet\Temperatura.Testes\TestResults\testResults.trx) 
        {
          if($line -match '<Counters total="(?<total>.+)" executed="(?<executed>.+)" passed="(?<passed>.+)" failed="(?<failed>.+)" error="(?<error>.+)" ' )
          {
                  $total=$($Matches.total)
                  $passed=$($Matches.passed)
                  $failed=$($Matches.failed)
                  $total+"/"+$passed
          }
        }
        ENDOFFILE
        pwsh ./file.ps1